services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: expense_postgres
    environment:
      POSTGRES_DB: expense_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/migrations:/docker-entrypoint-initdb.d
    networks:
      - expense_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: expense_mongodb
    environment:
      MONGO_INITDB_DATABASE: expense_management
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/mongodb:/docker-entrypoint-initdb.d
    networks:
      - expense_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: expense_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - expense_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./server/api-gateway/Dockerfile
      target: development
    container_name: expense_api_gateway
    environment:
      NODE_ENV: development
      PORT: 5000
      AUTH_SERVICE_URL: http://auth-service:5001
      USER_SERVICE_URL: http://user-service:5002
      EXPENSE_SERVICE_URL: http://expense-service:5003
      APPROVAL_SERVICE_URL: http://approval-service:5004
      CURRENCY_SERVICE_URL: http://currency-service:5005
      OCR_SERVICE_URL: http://ocr-service:5006
      NOTIFICATION_SERVICE_URL: http://notification-service:5007
    ports:
      - "5000:5000"
    volumes:
      - ./server/api-gateway/src:/workspace/server/api-gateway/src
      - ./server/shared:/workspace/server/shared
    depends_on:
      - auth-service
      - user-service
      - expense-service
    networks:
      - expense_network

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: ./server/auth-service/Dockerfile
      target: development
    container_name: expense_auth_service
    environment:
      NODE_ENV: development
      PORT: 5001
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: expense_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      JWT_SECRET: your_jwt_secret_key_change_this
      FRONTEND_URL: http://localhost:5173
    ports:
      - "5001:5001"
    volumes:
      - ./server/auth-service/src:/workspace/server/auth-service/src
      - ./server/shared:/workspace/server/shared
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - expense_network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./server/user-service/Dockerfile
    container_name: expense_user_service
    environment:
      NODE_ENV: development
      PORT: 5002
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: expense_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - expense_network

  # Expense Service
  expense-service:
    build:
      context: .
      dockerfile: ./server/expense-service/Dockerfile
    container_name: expense_expense_service
    environment:
      NODE_ENV: development
      PORT: 5003
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: expense_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      MONGODB_URI: mongodb://mongodb:27017/expense_management
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - expense_network

  # Approval Service
  approval-service:
    build:
      context: .
      dockerfile: ./server/approval-service/Dockerfile
    container_name: expense_approval_service
    environment:
      NODE_ENV: development
      PORT: 5004
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: expense_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - expense_network

  # Currency Service
  currency-service:
    build:
      context: .
      dockerfile: ./server/currency-service/Dockerfile
    container_name: expense_currency_service
    environment:
      NODE_ENV: development
      PORT: 5005
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: expense_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      REDIS_URL: redis://redis:6379
    ports:
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - expense_network

  # OCR Service (Python)
  ocr-service:
    build:
      context: .
      dockerfile: ./server/ocr-service/Dockerfile
    container_name: expense_ocr_service
    environment:
      FLASK_ENV: development
      PORT: 5006
      MONGODB_URI: mongodb://mongodb:27017/expense_management
    ports:
      - "5006:5006"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - expense_network

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./server/notification-service/Dockerfile
    container_name: expense_notification_service
    environment:
      NODE_ENV: development
      PORT: 5007
      MONGODB_URI: mongodb://mongodb:27017/expense_management
    ports:
      - "5007:5007"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - expense_network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:

networks:
  expense_network:
    driver: bridge
